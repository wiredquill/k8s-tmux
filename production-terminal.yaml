apiVersion: v1
kind: ConfigMap
metadata:
  name: production-config
  namespace: ai-dev
data:
  remote-mode-script.sh: |
    #!/bin/bash
    NTFY_SERVER="https://ntfy.wiredquill.com"
    NTFY_TOPIC="ai_communication"
    REMOTE_MODE_FILE="/tmp/remote_mode_enabled"

    send_ntfy() {
        curl -s -X POST "$NTFY_SERVER/$NTFY_TOPIC" \
            -H "Title: $1" \
            -H "Priority: ${3:-3}" \
            -d "$2" 
    }

    toggle_remote_mode() {
        if [ -f "$REMOTE_MODE_FILE" ]; then
            rm "$REMOTE_MODE_FILE"
            echo "üî¥ Remote mode DISABLED"
            send_ntfy "Claude Remote Mode" "Remote mode disabled" 2
        else
            touch "$REMOTE_MODE_FILE"
            echo "üü¢ Remote mode ENABLED"
            send_ntfy "Claude Remote Mode" "Remote mode enabled" 4
        fi
    }

  init-production.sh: |
    #!/bin/bash
    
    # Setup remote mode
    source /config/remote-mode-script.sh
    
    cat > /usr/local/bin/remote-toggle << 'EOF'
    #!/bin/bash
    source /config/remote-mode-script.sh
    toggle_remote_mode
    EOF
    chmod +x /usr/local/bin/remote-toggle

    # Setup kubectl config combiner
    mkdir -p ~/.kube
    cat > /usr/local/bin/kube-combine << 'EOF'
    #!/bin/bash
    KUBE_DIR="/mnt/k8s-tmux/kube"
    if [ -d "$KUBE_DIR" ]; then
        configs=$(find "$KUBE_DIR" -name "*.yaml" -o -name "*.yml" -o -name "config" -o -name "*.conf" 2>/dev/null)
        if [ -n "$configs" ]; then
            export KUBECONFIG=$(echo $configs | tr ' ' ':')
            kubectl config view --flatten > ~/.kube/config
            echo "‚úÖ Combined kubeconfigs: $(echo $configs | wc -w) files"
            kubectl config get-contexts
        else
            echo "‚ö†Ô∏è  No kubeconfig files found in $KUBE_DIR"
        fi
    fi
    EOF
    chmod +x /usr/local/bin/kube-combine

    # Setup Claude Code client with API key from secret
    if [ -f /secrets/claude-api-key ]; then
        echo "export ANTHROPIC_API_KEY=$(cat /secrets/claude-api-key)" >> ~/.bashrc
        echo "‚úÖ Claude API key configured from secret"
    else
        echo "‚ö†Ô∏è  Claude API key not found. Set it with: kubectl create secret generic claude-secrets --from-literal=claude-api-key=YOUR_KEY -n ai-dev"
    fi

    # Setup GitHub CLI with token from secret
    if [ -f /secrets/github-token ]; then
        echo "$(cat /secrets/github-token)" | gh auth login --with-token
        echo "‚úÖ GitHub authenticated from secret"
    else
        echo "‚ö†Ô∏è  GitHub token not found. Set it with: kubectl create secret generic github-secrets --from-literal=github-token=YOUR_TOKEN -n ai-dev"
        echo "üí° Or run: gh auth login"
    fi

    # Easy package installer
    cat > /usr/local/bin/easy-install << 'EOF'
    #!/bin/bash
    if [ $# -eq 0 ]; then
        echo "Usage: easy-install <package1> [package2] ..."
        echo "Example: easy-install nodejs npm docker"
        exit 1
    fi
    echo "üîß Installing packages: $*"
    if zypper in -y "$@"; then
        echo "‚úÖ Installed via zypper: $*"
    else
        echo "‚ö†Ô∏è  Some packages may not be available"
        echo "üí° Try: zypper search <package-name>"
    fi
    EOF
    chmod +x /usr/local/bin/easy-install

    # Add aliases
    echo "alias k='kubectl'" >> ~/.bashrc
    echo "alias ll='ls -la'" >> ~/.bashrc
    echo "alias la='ls -A'" >> ~/.bashrc
    echo "alias l='ls -CF'" >> ~/.bashrc
    echo "alias rmtoggle='remote-toggle'" >> ~/.bashrc
    echo "alias install='easy-install'" >> ~/.bashrc
    echo "alias claude='claude-code'" >> ~/.bashrc
    
    # Add completions
    if command -v kubectl >/dev/null 2>&1; then
        echo 'source <(kubectl completion bash)' >> ~/.bashrc
        echo 'complete -F __start_kubectl k' >> ~/.bashrc
    fi
    if command -v helm >/dev/null 2>&1; then
        echo 'source <(helm completion bash)' >> ~/.bashrc
    fi
    if command -v gh >/dev/null 2>&1; then
        echo 'source <(gh completion -s bash)' >> ~/.bashrc
    fi
    
    # Add remote mode to prompt
    echo 'export PS1="\[\033[1;32m\]\u@\h\[\033[00m\]:\[\033[1;34m\]\w\[\033[00m\]$([ -f /tmp/remote_mode_enabled ] && echo \"\[\033[1;31m\][REMOTE]\[\033[00m\]\")$ "' >> ~/.bashrc
    
    # Auto-combine kubeconfigs
    kube-combine 2>/dev/null || echo "‚ö†Ô∏è  Run 'kube-combine' to setup kubectl"
    
    source ~/.bashrc
    
    echo ""
    echo "üéØ Production k8s-tmux Terminal Ready!"
    echo ""
    echo "‚úÖ Installed: kubectl, helm, k9s, btop, gh, mc, claude-code"
    echo "üîß Commands: k, claude, remote-toggle, kube-combine, install"
    echo "üîë Secrets: Check Claude API key and GitHub token status above"
    echo "üéØ Remote: https://ntfy.wiredquill.com/ai_communication"
    echo ""
    echo "üìã Setup secrets:"
    echo "kubectl create secret generic claude-secrets --from-literal=claude-api-key=YOUR_KEY -n ai-dev"
    echo "kubectl create secret generic github-secrets --from-literal=github-token=YOUR_TOKEN -n ai-dev"
    echo ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-tmux-production
  namespace: ai-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-tmux-production
  template:
    metadata:
      labels:
        app: k8s-tmux-production
    spec:
      containers:
      - name: production-terminal
        image: opensuse/leap:15.6
        ports:
        - containerPort: 7681
        command: ["/bin/bash"]
        args: 
        - "-c"
        - |
          # Minimal repos and packages
          zypper refresh &&
          zypper in -y --no-recommends curl wget git vim nano tmux sudo openssh-clients tar gzip unzip jq ca-certificates mc tree htop patterns-devel-base-devel_basis &&
          
          # Install essential K8s tools from repos
          zypper in -y kubernetes-client helm &&
          
          # Install other tools from repos where possible
          zypper in -y gh btop &&
          
          # Install Claude Code client (latest version)
          CLAUDE_VERSION=$(curl -s https://api.github.com/repos/anthropics/claude-code/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') &&
          curl -L "https://github.com/anthropics/claude-code/releases/download/${CLAUDE_VERSION}/claude-code-linux-x64.tar.gz" | tar xz -C /tmp &&
          mv /tmp/claude-code /usr/local/bin/claude-code && chmod +x /usr/local/bin/claude-code &&
          
          # Only install k9s from GitHub (zypper version is outdated)
          curl -L https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz | tar xz -C /tmp &&
          mv /tmp/k9s /usr/local/bin/k9s && chmod +x /usr/local/bin/k9s &&
          
          # ttyd
          curl -L https://github.com/tsl0922/ttyd/releases/latest/download/ttyd.x86_64 -o /usr/local/bin/ttyd && chmod +x /usr/local/bin/ttyd &&
          
          # Create user
          useradd -m -s /bin/bash dev && echo 'dev ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers &&
          
          # Initialize
          su - dev -c '/config/init-production.sh' &&
          
          # Start terminal
          cd /mnt/k8s-tmux &&
          exec su - dev -c 'cd /mnt/k8s-tmux && /usr/local/bin/ttyd --port 7681 --interface 0.0.0.0 --writable --check-origin bash -l'
        volumeMounts:
        - name: k8s-tmux-storage
          mountPath: /mnt/k8s-tmux
        - name: wiredquill-storage
          mountPath: /mnt/WiredQuill
        - name: production-config
          mountPath: /config
        - name: claude-secrets
          mountPath: /secrets
          readOnly: true
        env:
        - name: TERM
          value: "xterm-256color"
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 512Mi
      volumes:
      - name: k8s-tmux-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/k8s/k8s-tmux
      - name: wiredquill-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/WiredQuill
      - name: production-config
        configMap:
          name: production-config
          defaultMode: 0755
      - name: claude-secrets
        secret:
          secretName: claude-secrets
          optional: true
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-tmux-production-service
  namespace: ai-dev
spec:
  selector:
    app: k8s-tmux-production
  ports:
  - protocol: TCP
    port: 80
    targetPort: 7681
  type: LoadBalancer