apiVersion: v1
kind: Namespace
metadata:
  name: k8s-tmux
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-tmux
  namespace: k8s-tmux
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-tmux
  template:
    metadata:
      labels:
        app: k8s-tmux
    spec:
      containers:
      - name: k8s-tmux
        image: ghcr.io/wiredquill/k8s-tmux:latest
        ports:
        - containerPort: 7681
        - containerPort: 8080
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          mkdir -p /mnt/k8s-tmux/uploads
          chmod 755 /mnt/k8s-tmux/uploads
          
          export TERM=xterm-256color
          export COLORTERM=truecolor
          export FORCE_COLOR=1
          export CLICOLOR_FORCE=1
          
          cd /mnt/k8s-tmux
          tmux new-session -d -s main -c /mnt/k8s-tmux bash
          tmux send-keys -t main 'export TERM=xterm-256color' Enter
          tmux send-keys -t main 'clear' Enter
          
          echo "Starting ttyd..."
          /usr/local/bin/ttyd --port 7681 --interface 0.0.0.0 --writable --terminal-type xterm-256color tmux attach-session -t main > /tmp/ttyd.log 2>&1 &
          TTYD_PID=$!
          
          sleep 3
          if ps -p $TTYD_PID > /dev/null; then
            echo "ttyd started successfully (PID: $TTYD_PID)"
          else
            echo "ERROR: ttyd failed to start"
          fi
          
          # Create the WORKING Python server
          cat > /tmp/server.py << 'PYEOF'
          #!/usr/bin/env python3
          import http.server
          import socketserver
          import urllib.parse
          import json
          import os
          
          class FileHandler(http.server.SimpleHTTPRequestHandler):
              def do_GET(self):
                  print(f"GET request: {self.path}")
                  if self.path == '/':
                      self.send_ui()
                  elif self.path.startswith('/api/files'):
                      self.send_file_list()
                  elif self.path == '/terminal':
                      self.redirect_to_ttyd()
                  else:
                      super().do_GET()
              
              def redirect_to_ttyd(self):
                  host = self.headers.get('Host', 'localhost').split(':')[0]
                  self.send_response(302)
                  self.send_header('Location', f'http://{host}:7681')
                  self.end_headers()
                  print(f"Redirected /terminal to http://{host}:7681")
              
              def send_file_list(self):
                  try:
                      print("Processing /api/files request")
                      query = urllib.parse.urlparse(self.path).query
                      params = urllib.parse.parse_qs(query)
                      path_param = params.get('path', [''])[0]
                      
                      base_dir = '/mnt'
                      full_path = os.path.join(base_dir, path_param) if path_param else base_dir
                      
                      if not os.path.exists(full_path):
                          self.send_error(404, "Path not found")
                          return
                      
                      files = []
                      for item in os.listdir(full_path):
                          item_path = os.path.join(full_path, item)
                          relative_path = os.path.relpath(item_path, base_dir)
                          
                          if os.path.isdir(item_path):
                              files.append({"name": item, "type": "dir", "path": relative_path, "size": 0})
                          else:
                              try:
                                  size = os.path.getsize(item_path)
                              except:
                                  size = 0
                              files.append({"name": item, "type": "file", "path": relative_path, "size": size})
                      
                      files.sort(key=lambda x: (x['type'] != 'dir', x['name'].lower()))
                      response_data = {"files": files, "current_path": path_param}
                      
                      json_response = json.dumps(response_data)
                      print(f"Sending file list response: {len(files)} files")
                      
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      self.wfile.write(json_response.encode())
                      
                  except Exception as e:
                      print(f"Error in send_file_list: {e}")
                      self.send_error(500, f"Server error: {e}")
              
              def send_ui(self):
                  print("Sending main UI")
                  html = '''<!DOCTYPE html>
          <html>
          <head>
              <title>AI Terminal - Working</title>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Inter, Arial, sans-serif; margin: 0; background: #f5f7fa; }
                  .container { height: 100vh; display: flex; flex-direction: column; background: white; margin: 8px; border-radius: 12px; }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 16px; display: flex; justify-content: space-between; }
                  .main-content { flex: 1; display: flex; }
                  .terminal-section { width: 70%; }
                  .sidebar { width: 30%; padding: 20px; background: #f8fafc; overflow-y: auto; }
                  .section { background: white; border-radius: 8px; padding: 16px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .section-title { font-weight: 600; margin-bottom: 12px; color: #2d3748; font-size: 14px; text-transform: uppercase; }
                  .file-browser { max-height: 200px; overflow-y: auto; border: 1px solid #e2e8f0; border-radius: 6px; padding: 8px; }
                  .file-item { padding: 8px; cursor: pointer; border-radius: 4px; }
                  .file-item:hover { background: #edf2f7; }
                  .terminal-frame { width: 100%; height: 100%; border: none; }
                  .btn { background: #667eea; color: white; border: none; padding: 10px 16px; border-radius: 6px; cursor: pointer; margin: 4px; }
                  .btn:hover { background: #5a6fd8; }
                  .input { width: 100%; padding: 8px; margin: 4px 0; border: 1px solid #ddd; border-radius: 4px; }
                  .debug { font-size: 11px; background: #f0f0f0; padding: 8px; border-radius: 4px; margin-top: 8px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🤖 AI Terminal</h1>
                      <div>
                          <button class="btn" onclick="refreshFiles()">🔄 Refresh</button>
                          <button class="btn" onclick="testAPI()">Test API</button>
                      </div>
                  </div>
                  
                  <div class="main-content">
                      <div class="terminal-section">
                          <iframe class="terminal-frame" id="terminalFrame"></iframe>
                      </div>
                      
                      <div class="sidebar">
                          <div class="section">
                              <div class="section-title">File Browser</div>
                              <div class="file-browser" id="fileBrowser">
                                  <div style="text-align: center; padding: 20px;">Loading files...</div>
                              </div>
                              <div class="debug" id="debugInfo">Debug info...</div>
                          </div>
                          
                          <div class="section">
                              <div class="section-title">Scheduled Commands</div>
                              <textarea class="input" rows="3" placeholder="Enter commands">ls -la --color</textarea>
                              <input type="text" class="input" placeholder="5m" value="5m">
                              <button class="btn" style="width: 100%;">📅 Add to Queue</button>
                          </div>
                          
                          <div class="section">
                              <div class="section-title">MQTT Configuration</div>
                              <input type="text" class="input" value="10.0.1.101:1883" readonly>
                              <input type="text" class="input" value="ai_terminal/comms" placeholder="Topic">
                              <button class="btn" style="width: 100%;">Test Connection</button>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  let debugEl = document.getElementById('debugInfo');
                  
                  function log(msg) {
                      console.log(msg);
                      debugEl.textContent = new Date().toLocaleTimeString() + ': ' + msg;
                  }
                  
                  function loadFiles() {
                      log('Loading files...');
                      
                      fetch('/api/files?' + new Date().getTime(), {
                          method: 'GET',
                          headers: {
                              'Accept': 'application/json',
                              'Cache-Control': 'no-cache'
                          }
                      })
                      .then(response => {
                          log('Response status: ' + response.status);
                          if (!response.ok) throw new Error('HTTP ' + response.status);
                          return response.json();
                      })
                      .then(data => {
                          log('Files received: ' + (data.files ? data.files.length : 0));
                          
                          const browser = document.getElementById('fileBrowser');
                          const files = data.files || [];
                          
                          if (files.length === 0) {
                              browser.innerHTML = '<div style="padding: 20px; text-align: center;">No files found</div>';
                          } else {
                              browser.innerHTML = files.map(file => 
                                  '<div class="file-item" onclick="handleFileClick(\\'' + 
                                  (file.path || file.name) + '\\',\\'' + file.type + '\\',\\'' + file.name + '\\')">' +
                                  (file.type === 'dir' ? '📁' : '📄') + ' ' + file.name + '</div>'
                              ).join('');
                          }
                          
                          log('File browser updated successfully');
                      })
                      .catch(error => {
                          log('Error: ' + error.message);
                          document.getElementById('fileBrowser').innerHTML = 
                              '<div style="color: red; padding: 10px;">Error: ' + error.message + '</div>';
                      });
                  }
                  
                  function handleFileClick(path, type, name) {
                      log('Clicked: ' + name + ' (type: ' + type + ')');
                      if (type === 'dir') {
                          // Navigate to directory (simplified for now)
                          log('Would navigate to directory: ' + path);
                      }
                  }
                  
                  function refreshFiles() {
                      log('Manual refresh');
                      loadFiles();
                  }
                  
                  function testAPI() {
                      log('Testing API directly');
                      fetch('/api/files')
                      .then(r => r.text())
                      .then(t => {
                          alert('API Response: ' + t.substring(0, 200));
                          log('API test completed');
                      })
                      .catch(e => alert('API Error: ' + e.message));
                  }
                  
                  // Set terminal source
                  document.getElementById('terminalFrame').src = '/terminal';
                  log('Terminal frame src set to /terminal');
                  
                  // Load files when ready
                  if (document.readyState === 'complete') {
                      loadFiles();
                  } else {
                      window.addEventListener('load', loadFiles);
                  }
                  
                  // Retry after delay
                  setTimeout(function() {
                      if (document.getElementById('fileBrowser').textContent.includes('Loading')) {
                          log('Retrying file load after delay...');
                          loadFiles();
                      }
                  }, 1000);
              </script>
          </body>
          </html>'''
                  
                  self.send_response(200)
                  self.send_header('Content-Type', 'text/html')
                  self.send_header('Cache-Control', 'no-cache')
                  self.end_headers()
                  self.wfile.write(html.encode())
          
          if __name__ == '__main__':
              port = 8080
              print(f'Starting AI Terminal server on port {port}')
              try:
                  with socketserver.TCPServer(('', port), FileHandler) as httpd:
                      print(f'Server ready at http://localhost:{port}')
                      httpd.serve_forever()
              except Exception as e:
                  print(f'Error: {e}')
          PYEOF
          
          echo "AI Terminal ready!"
          echo "Web UI: port 8080"
          echo "Terminal: port 7681"
          
          cd /mnt/k8s-tmux
          python3 /tmp/server.py
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: k8s-tmux-storage
          mountPath: /mnt/k8s-tmux
        - name: wiredquill-storage
          mountPath: /mnt/WiredQuill
        env:
        - name: TERM
          value: "xterm-256color"
      volumes:
      - name: k8s-tmux-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/k8s/k8s-tmux
      - name: wiredquill-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/WiredQuill
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-tmux-service
  namespace: k8s-tmux
spec:
  selector:
    app: k8s-tmux
  ports:
  - name: web-ui
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: terminal
    protocol: TCP
    port: 7681
    targetPort: 7681
  type: LoadBalancer