apiVersion: v1
kind: Namespace
metadata:
  name: k8s-tmux
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-tmux
  namespace: k8s-tmux
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-tmux
  template:
    metadata:
      labels:
        app: k8s-tmux
    spec:
      containers:
      - name: k8s-tmux
        image: ghcr.io/wiredquill/k8s-tmux:latest
        ports:
        - containerPort: 7681
        - containerPort: 8080
        command: ["/bin/bash"]
        args:
        - "-c"
        - |
          mkdir -p /mnt/k8s-tmux/uploads
          chmod 755 /mnt/k8s-tmux/uploads
          
          # Install MQTT client tools
          echo "Installing MQTT client tools..."
          zypper refresh && zypper install -y mosquitto-clients || echo "MQTT client install failed, using fallback"
          
          export TERM=xterm-256color
          export COLORTERM=truecolor
          export FORCE_COLOR=1
          export CLICOLOR_FORCE=1
          
          cd /mnt/k8s-tmux
          tmux new-session -d -s main -c /mnt/k8s-tmux bash
          tmux send-keys -t main 'export TERM=xterm-256color' Enter
          tmux send-keys -t main 'export COLORTERM=truecolor' Enter
          tmux send-keys -t main 'export FORCE_COLOR=1' Enter
          tmux send-keys -t main 'export CLICOLOR_FORCE=1' Enter
          tmux send-keys -t main 'alias ls="ls --color=auto"' Enter
          tmux send-keys -t main 'alias ll="ls -la --color=auto"' Enter
          tmux send-keys -t main 'clear' Enter
          
          # Verify tmux session exists
          echo "Checking tmux session..."
          tmux list-sessions
          
          # Start ttyd in background and wait for it to be ready
          echo "Starting ttyd..."
          /usr/local/bin/ttyd --port 7681 --interface 0.0.0.0 --writable --terminal-type xterm-256color tmux attach-session -t main > /tmp/ttyd.log 2>&1 &
          TTYD_PID=$!
          
          # Wait for ttyd to start
          sleep 3
          if ps -p $TTYD_PID > /dev/null; then
            echo "ttyd started successfully (PID: $TTYD_PID)"
          else
            echo "ERROR: ttyd failed to start"
            cat /tmp/ttyd.log
          fi
          
          # Create Python server script with full AI Terminal functionality
          cat > /tmp/server.py << 'EOF'
          #!/usr/bin/env python3
          import http.server
          import socketserver
          import urllib.parse
          import json
          import os
          import cgi
          import shutil
          import subprocess
          from pathlib import Path
          import threading
          import time
          
          # MQTT Client for communication
          class MQTTClient:
              def __init__(self, broker_host="10.0.1.101", broker_port=1883):
                  self.broker_host = broker_host
                  self.broker_port = broker_port
                  self.client = None
                  self.connected = False
                  
              def connect(self):
                  try:
                      # Simple MQTT connection test using socket
                      import socket
                      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                      sock.settimeout(5)
                      sock.connect((self.broker_host, self.broker_port))
                      
                      # Proper MQTT CONNECT packet with client ID
                      client_id = f"ai_terminal_{int(time.time())}"
                      client_id_bytes = client_id.encode('utf-8')
                      
                      connect_packet = bytearray()
                      connect_packet.append(0x10)  # CONNECT packet type
                      
                      # Variable header + payload length calculation
                      variable_header = bytearray()
                      variable_header.extend([0x00, 0x04])  # Protocol name length
                      variable_header.extend(b'MQTT')       # Protocol name
                      variable_header.append(0x04)         # Protocol level
                      variable_header.append(0x02)         # Connect flags (clean session)  
                      variable_header.extend([0x00, 0x3c]) # Keep alive (60 seconds)
                      
                      # Payload (client ID)
                      payload = bytearray()
                      payload.extend(len(client_id_bytes).to_bytes(2, 'big'))
                      payload.extend(client_id_bytes)
                      
                      # Remaining length
                      remaining_length = len(variable_header) + len(payload)
                      connect_packet.append(remaining_length)
                      connect_packet.extend(variable_header)
                      connect_packet.extend(payload)
                      
                      sock.send(connect_packet)
                      response = sock.recv(4)
                      
                      # Check CONNACK response
                      if len(response) >= 4 and response[0] == 0x20 and response[3] == 0x00:
                          self.connected = True
                          sock.close()
                          return True
                      else:
                          self.connected = False
                          sock.close()
                          return False
                          
                  except Exception as e:
                      self.connected = False
                      return False
                      
              def publish(self, topic, message):
                  try:
                      # Try mosquitto_pub first
                      result = subprocess.run([
                          'mosquitto_pub', '-h', self.broker_host, '-p', str(self.broker_port),
                          '-t', topic, '-m', message
                      ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, timeout=10)
                      if result.returncode == 0:
                          return True
                  except:
                      pass
                      
                  try:
                      # Proper MQTT publish using socket
                      import socket
                      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                      sock.settimeout(5)
                      sock.connect((self.broker_host, self.broker_port))
                      
                      # MQTT CONNECT first
                      client_id = f"ai_terminal_pub_{int(time.time())}"
                      client_id_bytes = client_id.encode('utf-8')
                      
                      connect_packet = bytearray()
                      connect_packet.append(0x10)  # CONNECT
                      
                      variable_header = bytearray()
                      variable_header.extend([0x00, 0x04])  # Protocol name length
                      variable_header.extend(b'MQTT')       # Protocol name  
                      variable_header.append(0x04)         # Protocol level
                      variable_header.append(0x02)         # Clean session
                      variable_header.extend([0x00, 0x3c]) # Keep alive
                      
                      payload = bytearray()
                      payload.extend(len(client_id_bytes).to_bytes(2, 'big'))
                      payload.extend(client_id_bytes)
                      
                      remaining_length = len(variable_header) + len(payload)
                      connect_packet.append(remaining_length)
                      connect_packet.extend(variable_header)
                      connect_packet.extend(payload)
                      
                      sock.send(connect_packet)
                      response = sock.recv(4)
                      
                      # Check CONNACK
                      if len(response) >= 4 and response[0] == 0x20 and response[3] == 0x00:
                          # Now send PUBLISH
                          topic_bytes = topic.encode('utf-8')
                          message_bytes = message.encode('utf-8')
                          
                          publish_packet = bytearray()
                          publish_packet.append(0x30)  # PUBLISH
                          remaining_length = 2 + len(topic_bytes) + len(message_bytes)
                          publish_packet.append(remaining_length)
                          publish_packet.extend(len(topic_bytes).to_bytes(2, 'big'))
                          publish_packet.extend(topic_bytes)
                          publish_packet.extend(message_bytes)
                          
                          sock.send(publish_packet)
                          sock.close()
                          return True
                      
                      sock.close()
                      return False
                  except:
                      return False
          
          # Global MQTT client
          mqtt_client = MQTTClient()
          
          class FileHandler(http.server.SimpleHTTPRequestHandler):
              def do_GET(self):
                  if self.path == '/':
                      self.send_ui()
                  elif self.path == '/mobile':
                      self.send_mobile_ui()
                  elif self.path.startswith('/api/files'):
                      self.send_file_list()
                  elif self.path == '/api/terminal-output':
                      self.get_terminal_output()
                  elif self.path == '/terminal' or self.path.startswith('/terminal/'):
                      self.proxy_to_ttyd()
                  else:
                      super().do_GET()
              
              def do_POST(self):
                  if self.path == '/api/send-command':
                      self.handle_send_command()
                  elif self.path == '/api/test-mqtt':
                      self.handle_test_mqtt()
                  elif self.path == '/api/mqtt-status':
                      self.handle_mqtt_status()
                  elif self.path == '/api/trigger-qa':
                      self.handle_trigger_qa()
                  else:
                      self.send_error(404)
              
              def proxy_to_ttyd(self):
                  """Proxy terminal requests to ttyd"""
                  import urllib.request
                  try:
                      req = urllib.request.Request(f'http://localhost:7681{self.path}')
                      with urllib.request.urlopen(req) as response:
                          self.send_response(200)
                          self.send_header('Content-Type', response.headers.get('Content-Type', 'text/html'))
                          self.end_headers()
                          self.wfile.write(response.read())
                  except Exception as e:
                      self.send_error(502, f"Terminal proxy error: {e}")
              
              def send_file_list(self):
                  """Handle file browser API requests"""
                  try:
                      # Parse path parameter
                      query = urllib.parse.urlparse(self.path).query
                      params = urllib.parse.parse_qs(query)
                      path_param = params.get('path', [''])[0]
                      
                      # Base directory
                      base_dir = '/mnt'
                      full_path = os.path.join(base_dir, path_param) if path_param else base_dir
                      
                      if not os.path.exists(full_path):
                          self.send_error(404, "Path not found")
                          return
                      
                      files = []
                      for item in os.listdir(full_path):
                          item_path = os.path.join(full_path, item)
                          relative_path = os.path.relpath(item_path, base_dir)
                          
                          if os.path.isdir(item_path):
                              files.append({
                                  "name": item,
                                  "type": "dir",
                                  "path": relative_path,
                                  "size": 0
                              })
                          else:
                              size = os.path.getsize(item_path)
                              files.append({
                                  "name": item,
                                  "type": "file",
                                  "path": relative_path,
                                  "size": size
                              })
                      
                      # Sort directories first, then files
                      files.sort(key=lambda x: (x['type'] != 'dir', x['name'].lower()))
                      
                      response_data = {
                          "files": files,
                          "current_path": path_param
                      }
                      
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.send_header('Access-Control-Allow-Origin', '*')
                      self.end_headers()
                      self.wfile.write(json.dumps(response_data).encode())
                      
                  except Exception as e:
                      self.send_error(500, f"Error listing files: {e}")
              
              def handle_send_command(self):
                  """Handle command execution requests"""
                  try:
                      content_length = int(self.headers['Content-Length'])
                      post_data = self.rfile.read(content_length)
                      data = json.loads(post_data.decode('utf-8'))
                      
                      command = data.get('command', '')
                      if not command:
                          self.send_error(400, "No command provided")
                          return
                      
                      # Send command to tmux session
                      subprocess.run(['tmux', 'send-keys', '-t', 'main', command, 'Enter'])
                      
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({"status": "sent"}).encode())
                      
                  except Exception as e:
                      self.send_error(500, f"Error sending command: {e}")
              
              def handle_test_mqtt(self):
                  """Test MQTT connection"""
                  try:
                      connected = mqtt_client.connect()
                      status = "connected" if connected else "failed"
                      
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({"status": status}).encode())
                      
                  except Exception as e:
                      self.send_error(500, f"MQTT test error: {e}")
              
              def handle_mqtt_status(self):
                  """Get MQTT status"""
                  try:
                      status = {
                          "broker": mqtt_client.broker_host,
                          "port": mqtt_client.broker_port,
                          "connected": mqtt_client.connected
                      }
                      
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps(status).encode())
                      
                  except Exception as e:
                      self.send_error(500, f"MQTT status error: {e}")
              
              def handle_trigger_qa(self):
                  """Handle Q&A modal trigger for testing"""
                  try:
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({"status": "triggered"}).encode())
                      
                  except Exception as e:
                      self.send_error(500, f"Q&A trigger error: {e}")
              
              def send_ui(self):
                  """Send the main AI Terminal UI"""
                  html = '''<!DOCTYPE html>
          <html>
          <head>
              <title>AI Terminal</title>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
                  
                  * { 
                      margin: 0; 
                      padding: 0; 
                      box-sizing: border-box; 
                  }
                  
                  body { 
                      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                      font-family: 'Inter', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
                      color: #2d3748;
                      height: 100vh;
                      overflow: hidden;
                  }
                  
                  .container {
                      height: 100vh;
                      display: flex;
                      flex-direction: column;
                      background: white;
                      border-radius: 12px;
                      margin: 8px;
                      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
                      overflow: hidden;
                  }
                  
                  .header {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      padding: 16px 24px;
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                  }
                  
                  .header h1 {
                      font-size: 20px;
                      font-weight: 600;
                      letter-spacing: -0.025em;
                  }
                  
                  .main-content {
                      flex-grow: 1;
                      display: flex;
                      background: #f8fafc;
                  }
                  
                  .terminal-section {
                      width: 66.66%;
                      border-right: 1px solid #e2e8f0;
                      background: white;
                  }
                  
                  .terminal-frame {
                      width: 100%;
                      height: 100%;
                      border: none;
                      background: #1a202c;
                      border-radius: 0 0 0 12px;
                  }
                  
                  .sidebar {
                      width: 33.33%;
                      display: flex;
                      flex-direction: column;
                      background: #f8fafc;
                      overflow-y: auto;
                      padding: 20px;
                      gap: 20px;
                  }
                  
                  .section {
                      background: white;
                      border-radius: 8px;
                      padding: 16px;
                      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
                      border: 1px solid #e2e8f0;
                  }
                  
                  .section-title {
                      font-weight: 600;
                      margin-bottom: 12px;
                      color: #2d3748;
                      font-size: 14px;
                      text-transform: uppercase;
                      letter-spacing: 0.05em;
                  }
                  
                  .file-browser {
                      max-height: 200px;
                      overflow-y: auto;
                      background: #f7fafc;
                      border: 1px solid #e2e8f0;
                      border-radius: 6px;
                      padding: 8px;
                  }
                  
                  .file-item {
                      padding: 8px 12px;
                      cursor: pointer;
                      border-radius: 4px;
                      font-size: 13px;
                      color: #4a5568;
                      transition: all 0.15s ease;
                      display: flex;
                      align-items: center;
                      gap: 8px;
                  }
                  
                  .file-item:hover {
                      background: #edf2f7;
                      color: #2d3748;
                      transform: translateX(2px);
                  }
                  
                  .btn {
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      border: none;
                      border-radius: 6px;
                      padding: 10px 16px;
                      cursor: pointer;
                      margin: 4px 0;
                      font-size: 13px;
                      font-weight: 500;
                      transition: all 0.15s ease;
                      font-family: 'Inter', sans-serif;
                      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
                  }
                  
                  .btn:hover {
                      transform: translateY(-1px);
                      box-shadow: 0 4px 12px 0 rgba(102, 126, 234, 0.4);
                  }
                  
                  .btn.secondary {
                      background: #e2e8f0;
                      color: #4a5568;
                  }
                  
                  .btn.secondary:hover {
                      background: #cbd5e0;
                      box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.15);
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🤖 AI Terminal</h1>
                      <div style="display: flex; gap: 12px; align-items: center;">
                          <button class="btn" id="remoteBtn" onclick="toggleRemote()">📡 Remote Mode</button>
                          <button class="btn" onclick="refreshFiles()">🔄 Refresh</button>
                      </div>
                  </div>
                  
                  <div class="main-content">
                      <div class="terminal-section" style="position: relative;">
                          <iframe class="terminal-frame" id="terminalFrame"></iframe>
                      </div>
                      
                      <div class="sidebar">
                          <div class="section">
                              <div class="section-title">File Browser</div>
                              <div class="file-browser" id="fileBrowser">
                                  <div style="text-align: center; padding: 20px; color: #718096;">Loading files...</div>
                              </div>
                          </div>
                          
                          <div class="section">
                              <div class="section-title">Quick Actions</div>
                              <button class="btn" onclick="testMQTT()" style="width: 100%;">Test MQTT Connection</button>
                              <button class="btn secondary" onclick="checkMQTTStatus()" style="width: 100%;">MQTT Status</button>
                              <div id="mqttStatus"></div>
                          </div>
                      </div>
                  </div>
              </div>
              
              <script>
                  let currentPath = '';
                  
                  document.getElementById('terminalFrame').src = '/terminal';
                  
                  function loadFiles(path = '') {
                      const url = path ? `/api/files?path=${encodeURIComponent(path)}` : '/api/files';
                      fetch(url)
                          .then(response => response.json())
                          .then(data => {
                              const browser = document.getElementById('fileBrowser');
                              currentPath = data.current_path || '';
                              
                              const files = data.files || data;
                              browser.innerHTML = files.map(file => `
                                  <div class="file-item" onclick="handleFileClick('${file.path || file.name}', '${file.type}', '${file.name}')">
                                      ${file.type === 'dir' ? '📁' : '📄'} ${file.name}
                                  </div>
                              `).join('');
                          })
                          .catch(error => {
                              document.getElementById('fileBrowser').innerHTML = '<div style="color: red; padding: 10px;">Error loading files</div>';
                          });
                  }
                  
                  function handleFileClick(path, type, name) {
                      if (type === 'dir') {
                          loadFiles(path);
                      }
                  }
                  
                  function refreshFiles() {
                      loadFiles(currentPath);
                  }
                  
                  function toggleRemote() {
                      // Remote functionality placeholder
                      alert('Remote mode functionality');
                  }
                  
                  function testMQTT() {
                      fetch('/api/test-mqtt', { method: 'POST' })
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById('mqttStatus').innerHTML = 
                                  `<div style="margin-top: 8px; padding: 8px; border-radius: 4px; background: ${data.status === 'connected' ? '#c6f6d5' : '#fed7d7'}; color: ${data.status === 'connected' ? '#22543d' : '#742a2a'};">
                                      MQTT: ${data.status}
                                  </div>`;
                          });
                  }
                  
                  function checkMQTTStatus() {
                      fetch('/api/mqtt-status')
                          .then(response => response.json())
                          .then(data => {
                              document.getElementById('mqttStatus').innerHTML = 
                                  `<div style="margin-top: 8px; padding: 8px; border-radius: 4px; background: #bee3f8; color: #2a4365; font-size: 12px;">
                                      Broker: ${data.broker}:${data.port}<br>
                                      Status: ${data.connected ? 'Connected' : 'Disconnected'}
                                  </div>`;
                          });
                  }
                  
                  // Initialize interface
                  loadFiles();
              </script>
          </body>
          </html>'''
                  
                  self.send_response(200)
                  self.send_header('Content-Type', 'text/html')
                  self.end_headers()
                  self.wfile.write(html.encode())
          
          # Start the server
          if __name__ == "__main__":
              port = 8080
              print(f"Starting AI Terminal server on port {port}")
              
              try:
                  with socketserver.TCPServer(("", port), FileHandler) as httpd:
                      print(f"AI Terminal ready at http://localhost:{port}")
                      httpd.serve_forever()
              except Exception as e:
                  print(f"Error starting server: {e}")
                  exit(1)
          EOF
          
          echo "AI Terminal ready!"
          echo "Web UI: port 8080"
          echo "Terminal: port 7681"
          echo "Colors: ENABLED"
          
          # EXECUTE THE PYTHON SERVER - this was missing!
          cd /mnt/k8s-tmux
          python3 /tmp/server.py
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: k8s-tmux-storage
          mountPath: /mnt/k8s-tmux
        - name: wiredquill-storage
          mountPath: /mnt/WiredQuill
        env:
        - name: TERM
          value: "xterm-256color"
      volumes:
      - name: k8s-tmux-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/k8s/k8s-tmux
      - name: wiredquill-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/WiredQuill
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-tmux-service
  namespace: k8s-tmux
spec:
  selector:
    app: k8s-tmux
  ports:
  - name: web-ui
    protocol: TCP
    port: 80
    targetPort: 8080
  - name: terminal
    protocol: TCP
    port: 7681
    targetPort: 7681
  type: LoadBalancer