apiVersion: v1
kind: ConfigMap
metadata:
  name: streamlined-config
  namespace: ai-dev
data:
  remote-mode-script.sh: |
    #!/bin/bash
    # Remote Mode Toggle Script for Claude AI Integration
    NTFY_SERVER="https://ntfy.wiredquill.com"
    NTFY_TOPIC="ai_communication"
    REMOTE_MODE_FILE="/tmp/remote_mode_enabled"
    LOG_FILE="/tmp/claude_monitor.log"

    # Function to send notification to ntfy
    send_ntfy() {
        local title="$1"
        local message="$2"
        local priority="${3:-3}"
        
        curl -s -X POST "$NTFY_SERVER/$NTFY_TOPIC" \
            -H "Title: $title" \
            -H "Priority: $priority" \
            -d "$message" >> "$LOG_FILE" 2>&1
    }

    # Function to toggle remote mode
    toggle_remote_mode() {
        if [ -f "$REMOTE_MODE_FILE" ]; then
            rm "$REMOTE_MODE_FILE"
            echo "🔴 Remote mode DISABLED"
            send_ntfy "Claude Remote Mode" "Remote mode disabled" 2
        else
            touch "$REMOTE_MODE_FILE"
            echo "🟢 Remote mode ENABLED"
            echo "Claude responses will be sent to ntfy when multiple options are available"
            send_ntfy "Claude Remote Mode" "Remote mode enabled - monitoring Claude responses" 4
        fi
    }

    # Function to check if remote mode is enabled
    is_remote_mode() {
        [ -f "$REMOTE_MODE_FILE" ]
    }

  init-setup.sh: |
    #!/bin/bash
    
    # Install remote mode functionality
    source /config/remote-mode-script.sh
    
    # Create remote mode toggle command
    cat > /usr/local/bin/remote-toggle << 'EOF'
    #!/bin/bash
    source /config/remote-mode-script.sh
    toggle_remote_mode
    EOF
    chmod +x /usr/local/bin/remote-toggle

    # Create send options command
    cat > /usr/local/bin/send-claude-options << 'EOF'
    #!/bin/bash
    source /config/remote-mode-script.sh
    if [ $# -eq 0 ]; then
        echo "Usage: send-claude-options 'Option 1|Option 2|Option 3'"
        exit 1
    fi
    if is_remote_mode; then
        send_ntfy "Claude Options Available" "$1" 5
        echo "📱 Sent options to ntfy: $1"
    else
        echo "❌ Remote mode not enabled. Use 'remote-toggle' first."
    fi
    EOF
    chmod +x /usr/local/bin/send-claude-options

    # Setup kubectl configuration
    mkdir -p ~/.kube
    
    # Create kubectl auto-combiner script
    cat > /usr/local/bin/kube-combine << 'EOF'
    #!/bin/bash
    # Auto-combine all kubeconfig files in /mnt/k8s-tmux/kube/
    KUBE_DIR="/mnt/k8s-tmux/kube"
    COMBINED_CONFIG="/tmp/combined-kubeconfig"
    
    if [ -d "$KUBE_DIR" ]; then
        configs=$(find "$KUBE_DIR" -name "*.yaml" -o -name "*.yml" -o -name "config" -o -name "*.conf" 2>/dev/null)
        
        if [ -n "$configs" ]; then
            export KUBECONFIG=$(echo $configs | tr ' ' ':')
            kubectl config view --flatten > "$COMBINED_CONFIG"
            cp "$COMBINED_CONFIG" ~/.kube/config
            echo "✅ Combined kubeconfigs: $(echo $configs | wc -w) files"
            kubectl config get-contexts
        else
            echo "⚠️  No kubeconfig files found in $KUBE_DIR"
        fi
    else
        echo "⚠️  Kube directory not found: $KUBE_DIR"
    fi
    EOF
    chmod +x /usr/local/bin/kube-combine

    # Add shell aliases
    echo "alias rmtoggle='remote-toggle'" >> ~/.bashrc
    echo "alias send-options='send-claude-options'" >> ~/.bashrc
    echo "alias k='kubectl'" >> ~/.bashrc
    echo "alias kx='kubectx'" >> ~/.bashrc  
    echo "alias kn='kubens'" >> ~/.bashrc
    echo "alias ll='ls -la'" >> ~/.bashrc
    echo "alias la='ls -A'" >> ~/.bashrc
    echo "alias l='ls -CF'" >> ~/.bashrc
    
    # Add kubectl completion if available
    if command -v kubectl >/dev/null 2>&1; then
        echo 'source <(kubectl completion bash)' >> ~/.bashrc
        echo 'complete -F __start_kubectl k' >> ~/.bashrc
    fi
    
    if command -v helm >/dev/null 2>&1; then
        echo 'source <(helm completion bash)' >> ~/.bashrc
    fi
    
    # Add remote mode status to prompt
    echo 'export PS1="\[\033[1;32m\]\u@\h\[\033[00m\]:\[\033[1;34m\]\w\[\033[00m\]$([ -f /tmp/remote_mode_enabled ] && echo \"\[\033[1;31m\][REMOTE]\[\033[00m\]\")$ "' >> ~/.bashrc
    
    # Auto-combine kubeconfigs on startup
    kube-combine 2>/dev/null || echo "⚠️  Run 'kube-combine' to setup kubectl"
    
    source ~/.bashrc
    
    echo ""
    echo "================================="
    echo "🎯 k8s-tmux Terminal Ready! 🎯"
    echo "================================="
    echo "📦 Installed:"
    echo "  • Kubernetes tools: kubectl, helm, kubectx, kubens, k9s"
    echo "  • Development: git, vim, nano, tmux, zsh, python3"
    echo "  • Monitoring: btop, htop, mc, tree"
    echo "  • GitHub: gh, lazygit"
    echo "  • Claude: claude-code client"
    echo ""
    echo "🔧 Commands:"
    echo "  • remote-toggle     - Toggle remote mode"
    echo "  • kube-combine      - Combine kubeconfigs"
    echo "  • k, kx, kn         - kubectl shortcuts"
    echo ""
    echo "🎯 Remote: https://ntfy.wiredquill.com/ai_communication"
    echo "📁 Storage: /mnt/k8s-tmux, /mnt/WiredQuill"
    echo ""

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-tmux-streamlined
  namespace: ai-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-tmux-streamlined
  template:
    metadata:
      labels:
        app: k8s-tmux-streamlined
    spec:
      containers:
      - name: streamlined-terminal
        image: opensuse/leap:15.6
        ports:
        - containerPort: 7681
        command: ["/bin/bash"]
        args: 
        - "-c"
        - |
          # Essential repositories first
          zypper addrepo -cfp 90 'https://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Leap_15.6/' packman &&
          zypper --gpg-auto-import-keys refresh &&
          
          # Install essential packages only (avoid conflicts)
          zypper in -y --no-recommends curl wget git vim nano tmux zsh sudo openssh-clients tar gzip unzip jq python3 python3-pip ca-certificates mc tree htop &&
          
          # Install Kubernetes tools from repos
          zypper in -y kubernetes-client helm &&
          
          # Install modern CLI tools from GitHub (latest versions)
          curl -L https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz | tar xz -C /tmp &&
          mv /tmp/k9s /usr/local/bin/k9s && chmod +x /usr/local/bin/k9s &&
          
          KUBECTX_VERSION=$(curl -s https://api.github.com/repos/ahmetb/kubectx/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') &&
          curl -L "https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubectx_${KUBECTX_VERSION}_linux_x86_64.tar.gz" | tar xz -C /tmp &&
          curl -L "https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubens_${KUBECTX_VERSION}_linux_x86_64.tar.gz" | tar xz -C /tmp &&
          mv /tmp/kubectx /usr/local/bin/kubectx && mv /tmp/kubens /usr/local/bin/kubens &&
          chmod +x /usr/local/bin/kubectx /usr/local/bin/kubens &&
          
          # Install GitHub tools
          zypper in -y gh &&
          curl -L https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_Linux_x86_64.tar.gz | tar xz -C /tmp &&
          mv /tmp/lazygit /usr/local/bin/lazygit && chmod +x /usr/local/bin/lazygit &&
          
          # Install Claude Code client
          curl -L https://github.com/anthropics/claude-code/releases/latest/download/claude-code-linux-x64.tar.gz | tar xz -C /tmp &&
          mv /tmp/claude-code /usr/local/bin/claude-code && chmod +x /usr/local/bin/claude-code &&
          
          # Install btop (system monitor)
          curl -L https://github.com/aristocratos/btop/releases/latest/download/btop-x86_64-linux-musl.tbz | tar xj -C /tmp &&
          if [ -f /tmp/btop/bin/btop ]; then mv /tmp/btop/bin/btop /usr/local/bin/btop && chmod +x /usr/local/bin/btop; fi &&
          
          # Install ttyd
          curl -L https://github.com/tsl0922/ttyd/releases/latest/download/ttyd.x86_64 -o /usr/local/bin/ttyd && chmod +x /usr/local/bin/ttyd &&
          
          # Create user
          useradd -m -s /bin/bash dev && echo 'dev ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers &&
          
          # Initialize
          su - dev -c '/config/init-setup.sh' &&
          
          # Start terminal
          cd /mnt/k8s-tmux &&
          exec su - dev -c 'cd /mnt/k8s-tmux && /usr/local/bin/ttyd --port 7681 --interface 0.0.0.0 --writable --check-origin bash -l'
        volumeMounts:
        - name: k8s-tmux-storage
          mountPath: /mnt/k8s-tmux
        - name: wiredquill-storage
          mountPath: /mnt/WiredQuill
        - name: streamlined-config
          mountPath: /config
        env:
        - name: TERM
          value: "xterm-256color"
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 250m
            memory: 512Mi
      volumes:
      - name: k8s-tmux-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/k8s/k8s-tmux
      - name: wiredquill-storage
        nfs:
          server: 10.0.0.10
          path: /volume1/WiredQuill
      - name: streamlined-config
        configMap:
          name: streamlined-config
          defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-tmux-streamlined-service
  namespace: ai-dev
spec:
  selector:
    app: k8s-tmux-streamlined
  ports:
  - protocol: TCP
    port: 80
    targetPort: 7681
  type: LoadBalancer